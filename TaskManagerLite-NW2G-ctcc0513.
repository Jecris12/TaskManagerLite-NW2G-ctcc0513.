import java.awt.*;
import java.util.LinkedList;
import javax.swing.*;

public class TaskManagerLite {

    static class Task {
        private String title;
        private String description;
        private String dueDate;
        private boolean isCompleted;

        public Task(String title, String description, String dueDate) {
            this.title = title;
            this.description = description;
            this.dueDate = dueDate;
            this.isCompleted = false;
        }

        public void update(String title, String description, String dueDate) {
            this.title = title;
            this.description = description;
            this.dueDate = dueDate;
        }

        public void markCompleted() {
            this.isCompleted = true;
        }

        public String getTitle() {
            return title;
        }

        public String getDescription() {
            return description;
        }

        public String getDueDate() {
            return dueDate;
        }

        public boolean isCompleted() {
            return isCompleted;
        }

        @Override
        public String toString() {
            return title + " (" + (isCompleted ? "Completed" : "Pending") + ")";
        }
    }

    private final LinkedList<Task> tasks = new LinkedList<>();
    private final DefaultListModel<Task> taskListModel = new DefaultListModel<>();
    private final JList<Task> taskList = new JList<>(taskListModel);

    public TaskManagerLite() {
        JFrame frame = new JFrame("Task Manager Lite");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        taskList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        taskList.setCellRenderer(new TaskRenderer());
        JScrollPane taskScrollPane = new JScrollPane(taskList);
        frame.add(taskScrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new GridLayout(1, 4));
        JButton addButton = new JButton("Add Task");
        JButton editButton = new JButton("Edit Task");
        JButton deleteButton = new JButton("Delete Task");
        JButton markCompleteButton = new JButton("Mark Completed");
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(markCompleteButton);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        addButton.addActionListener(e -> addTask());

        editButton.addActionListener(e -> editTask());

        deleteButton.addActionListener(e -> deleteTask());

        markCompleteButton.addActionListener(e -> markTaskCompleted());

        frame.setVisible(true);
    }

    private void addTask() {
        JTextField titleField = new JTextField();
        JTextField descriptionField = new JTextField();
        JTextField dueDateField = new JTextField();
        Object[] message = {
            "Title:", titleField,
            "Description:", descriptionField,
            "Due Date:", dueDateField
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Add Task", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            String title = titleField.getText().trim();
            String description = descriptionField.getText().trim();
            String dueDate = dueDateField.getText().trim();

            if (title.isEmpty() || dueDate.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Title and Due Date are required.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Task task = new Task(title, description, dueDate);
            tasks.add(task);
            SwingUtilities.invokeLater(() -> taskListModel.addElement(task));
            showReminder(task);
        }
    }

    private void editTask() {
        int selectedIndex = taskList.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(null, "Please select a task to edit.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Task task = tasks.get(selectedIndex);
        JTextField titleField = new JTextField(task.getTitle());
        JTextField descriptionField = new JTextField(task.getDescription());
        JTextField dueDateField = new JTextField(task.getDueDate());
        Object[] message = {
            "Title:", titleField,
            "Description:", descriptionField,
            "Due Date:", dueDateField
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Edit Task", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            String title = titleField.getText().trim();
            String description = descriptionField.getText().trim();
            String dueDate = dueDateField.getText().trim();

            if (title.isEmpty() || dueDate.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Title and Due Date are required.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            task.update(title, description, dueDate);
            SwingUtilities.invokeLater(() -> taskListModel.setElementAt(task, selectedIndex));
            showReminder(task);
        }
    }

    private void deleteTask() {
        int selectedIndex = taskList.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(null, "Please select a task to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        tasks.remove(selectedIndex);
        SwingUtilities.invokeLater(() -> taskListModel.remove(selectedIndex));
    }

    private void markTaskCompleted() {
        int selectedIndex = taskList.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(null, "Please select a task to mark as completed.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Task task = tasks.get(selectedIndex);
        task.markCompleted();
        SwingUtilities.invokeLater(() -> taskListModel.setElementAt(task, selectedIndex));
    }

    private void showReminder(Task task) {
        JOptionPane.showMessageDialog(null, "Reminder:\n" + task.getTitle() + " is due on " + task.getDueDate(), "Task Reminder", JOptionPane.INFORMATION_MESSAGE);
    }

    static class TaskRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (value instanceof Task) {
                Task task = (Task) value;
                String text = "<html><b>" + task.getTitle() + "</b><br>" + task.getDescription() + "<br><i>" + (task.isCompleted() ? "Completed" : "Pending") + "</i></html>";
                setText(text);
            }
            return c;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(TaskManagerLite::new);
    }
}
